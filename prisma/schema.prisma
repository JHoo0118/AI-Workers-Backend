generator client {
  provider             = "prisma-client-py"
  previewFeatures      = ["postgresqlExtensions"]
  interface            = "sync"
  recursive_type_depth = "5"
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [vector]
}

model User {
  email        String        @id
  username     String        @unique
  password     String?
  type         SignupType    @default(EMAIL)
  disabled     Boolean       @default(false)
  remainCount  Int           @default(0)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  DownloadLogs DownloadLog[]
  Files        File[]
  refreshToken RefreshToken?
}

model RefreshToken {
  userEmail String   @unique
  token     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userEmail], references: [email], onDelete: Cascade)
}

model File {
  id             Int           @id @default(autoincrement())
  userEmail      String?
  filePath       String
  tmpFilePath    String?
  fileSize       String
  uploadDate     DateTime      @default(now())
  contentType    String
  filename       String
  originFilename String
  DownloadLogs   DownloadLog[]
  User           User?         @relation(fields: [userEmail], references: [email], onDelete: Cascade)
}

model DownloadLog {
  id           Int      @id @default(autoincrement())
  fileId       Int
  userEmail    String?
  downloadDate DateTime @default(now())
  userIP       String?
  File         File     @relation(fields: [fileId], references: [id], onDelete: Cascade)
  User         User?    @relation(fields: [userEmail], references: [email], onDelete: Cascade)
}

model Documents {
  id        String                 @id @default(cuid())
  content   String
  metadata  Json
  embedding Unsupported("vector")?
  createdAt DateTime               @default(now())
}

enum SignupType {
  EMAIL
  GOOGLE
}
